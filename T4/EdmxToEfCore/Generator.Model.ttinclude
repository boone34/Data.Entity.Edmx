<#@ assembly name="System.Core" #>
<#@ assembly name="$(ProjectDir)EdmxToEfCore\TechNoir.Data.Entity.Edmx.Serialization.dll" #>
<#@ assembly name="$(ProjectDir)EdmxToEfCore\TechNoir.Data.Entity.Edmx.Model.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="TechNoir.Data.Entity.Edmx.Serialization" #>
<#@ import namespace="TechNoir.Data.Entity.Edmx.Model" #>
<#@ import namespace="TechNoir.Data.Entity.Edmx.Model.Conceptual" #>
<#+
private void GenerateModel(T4FileManager file_manager, Edmx edmx, Dictionary<string, string> config)
{
    foreach (var entity_type in edmx.Runtime.ConceptualSchema.EntityTypes)
    {
        file_manager.StartNewFile($"{entity_type.Name}.cs", null, config["SubFolder"]);
#>
using System;
using System.Collections.Generic;

namespace <#= config["Namespace"] #>
{
    public partial class <#= entity_type.Name #>
    {
<#+
        if (entity_type.Properties.Any())
        {
#>
        #region Persistance Properties

<#+
            foreach (var property in entity_type.Properties)
            {
	            if (property.CsType == "string")
	            {
		            if (property.Nullable)
		            {
#>
        public virtual <#= property.CsType #>? <#= property.Name #> { get; set; }
<#+
		            }
		            else
		            {
#>
        public virtual <#= property.CsType #> <#= property.Name #> { get; set; } = null!;
<#+
		            }
	            }
	            else
	            {
#>
        public virtual <#= property.CsType #> <#= property.Name #> { get; set; }
<#+
	            }
            }
#>

        #endregion
<#+
        }

        if (entity_type.ParentProperties.Any())
        {
#>
        #region Parent Properties

<#+
            foreach (var parent_property in entity_type.ParentProperties)
            {
	            if (parent_property.ToEnd.Multiplicity == Multiplicity.ZeroOrOne)
	            {
#>
        public virtual <#= parent_property.ToEnd.EntityType.Name #>? <#= parent_property.Name #> { get; set; }
<#+
	            }
	            else
	            {
#>
        public virtual <#= parent_property.ToEnd.EntityType.Name #> <#= parent_property.Name #> { get; set; } = null!;
<#+
	            }
            }
#>

        #endregion
<#+
        }

        if (entity_type.ChildProperties.Any())
        {
#>
        #region Child Properties

<#+
            foreach (var child_property in entity_type.ChildProperties)
            {
#>
        public virtual <#= child_property.ToEnd.EntityType.Name #>? <#= child_property.Name #> { get; set; }
<#+
            }
#>

        #endregion
<#+
        }

        if (entity_type.ChildCollections.Any())
        {
#>
        #region Child Collections

<#+
            foreach (var child_collection in entity_type.ChildCollections)
            {
#>
        public virtual ICollection<<#= child_collection.ToEnd.EntityType.Name #>> <#= child_collection.Name #> { get; set; } = null!;
<#+
            }
#>

        #endregion
<#+
        }

        if (entity_type.ManyToManyCollections.Any())
        {
#>
        #region Many To Many Collections

<#+
            foreach (var many_to_many_collection in entity_type.ManyToManyCollections)
            {
#>
        public virtual ICollection<<#= many_to_many_collection.ToEnd.EntityType.Name #>> <#= many_to_many_collection.Name #> { get; set; } = null!;
<#+
            }
#>

        #endregion
<#+
        }
#>
    }
}
<#+
        file_manager.FinishFile();
    }
}
#>
